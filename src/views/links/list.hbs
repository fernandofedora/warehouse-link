<!-- Contenedor principal -->
<div class="container mt-5">
    <!-- Menú desplegable y botón de agregar enlace -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <div class="form-group">
            <label for="viewSelector" class="mr-2">Select View:</label>
            <select class="form-control mr-2" id="viewSelector" style="width: 150px;">
                <option value="cardView">Card View</option>
                <option value="listView">List View</option>
            </select>
        </div>
        <button class="btn btn-success" id="addLinkBtn">Add New Link</button>

        <div class="form-group">
            <label for="categoryFilter" class="mr-2">Filter by Category:</label>
            <select id="categoryFilter" class="form-control">
                <option value="all" selected>All</option>
                <option value="favorite">My Favorite</option>
                <option value="watch-later">Watch Later</option>
                <option value="projects">Projects</option>
            </select>
        </div>
    </div>

    <!-- Contenedor de tarjetas -->
    <div id="cardView" class="view-container" style="display: none;">
        <!-- Botones para eliminar duplicados y seleccionar todos -->
        <div class="d-flex justify-content-between mb-3">
            <div>
                <input type="checkbox" id="selectAllCardView"> Select All
            </div>
            <button class="btn btn-danger" id="deleteSelectedBtn" disabled>Delete Selected</button>
            <button class="btn btn-warning" id="deleteDuplicatesBtn">Delete Duplicates</button>
        </div>

        <!-- Barra de búsqueda -->
        <div class="input-group mb-3">
            <input type="text" id="searchInputCard" class="form-control" placeholder="Search">
            <div class="input-group-append">
                <span class="input-group-text"><i class="fas fa-search"></i></span>
            </div>
        </div>

        <!-- Aquí irían las tarjetas -->
        <div class="container-fluid p-4">
            <div class="row">
                {{#each links}}
                <div class="col-md-4 mb-4 link-item" data-category="{{category}}">
                    <div class="card text-center h-100">
                        <div class="card-body">
                            <!-- Checkbox para seleccionar múltiples enlaces -->
                            <input type="checkbox" class="selectLinkCheckbox" data-id="{{encrypted_id}}" data-url="{{url}}">

                            <a href="{{url}}" target="_blank">
                                <h3 class="card-title">{{title}}</h3>
                            </a>
                            <p class="m-2">{{description}}</p>
                            <p class="text-muted">Category: {{category}}</p>
                            <p class="text-muted">{{timeago created_at}}</p>

                            <a class="btn btn-danger" href="/links/delete/{{encrypted_id}}">Delete Link</a>
                            <a class="btn btn-secondary" href="/links/edit/{{encrypted_id}}">Edit</a>
                            <button class="btn btn-primary" onclick="copyLink('{{url}}')">Copy Link</button>
                        </div>
                    </div>
                </div>
                {{else}}
                <div class="col-md-4 mx-auto">
                    <div class="card card-body text-center">
                        <p>There are no links saved yet.</p>
                        <a href="/links/add">Create One!</a>
                    </div>
                </div>
                {{/each}}
            </div>
        </div>
    </div>

    <!-- Contenedor de lista -->
    <div id="listView" class="view-container" style="display: none;">
        <!-- Aquí iría la lista -->
        <table id="linksTable" class="table table-bordered">
            <thead>
                <tr>
                    <th><input type="checkbox" id="selectAllListView"></th> <!-- Checkbox para seleccionar todos -->
                    <th>Title</th>
                    <th>Description</th>
                    <th>Created At</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {{#each links}}
                <tr>
                    <td><input type="checkbox" class="selectLinkCheckbox" data-id="{{encrypted_id}}" data-url="{{url}}"></td>
                    <td><a href="{{url}}" target="_blank">{{title}}</a></td>
                    <td>{{description}}</td>
                    <td>{{timeago created_at}}</td>
                    <td>
                        <a class="btn btn-danger" href="/links/delete/{{encrypted_id}}">Delete</a>
                        <a class="btn btn-secondary" href="/links/edit/{{encrypted_id}}">Edit</a>
                        <button class="btn btn-primary" onclick="copyLink('{{url}}')">Copy</button>
                    </td>
                </tr>
                {{else}}
                <tr>
                    <td colspan="5" class="text-center">There are no links saved yet.</td>
                </tr>
                {{/each}}
            </tbody>
        </table>
    </div>
</div>

<script>
    document.getElementById('viewSelector').addEventListener('change', function () {
    const selectedView = this.value;
    sessionStorage.setItem('vista', selectedView);
    if (selectedView === 'cardView') {
        document.getElementById('cardView').style.display = 'block';
        document.getElementById('listView').style.display = 'none';
    } else if (selectedView === 'listView') {
        document.getElementById('cardView').style.display = 'none';
        document.getElementById('listView').style.display = 'block';
    }
});

document.getElementById('searchInputCard').addEventListener('input', function () {
    const searchTerm = this.value.toLowerCase();
    document.querySelectorAll('.link-item').forEach(function (link) {
        const linkText = link.innerText.toLowerCase();
        link.style.display = linkText.includes(searchTerm) ? 'block' : 'none';
    });
});

document.addEventListener('DOMContentLoaded', function() {
    const status = sessionStorage.getItem('vista') ?? "cardView";
    document.getElementById('viewSelector').value = status;
    document.getElementById('viewSelector').dispatchEvent(new Event('change'));
});

document.getElementById('addLinkBtn').addEventListener('click', function() {
    window.location.href = '/links/add';
});

async function copyLink(url) {
    try {
        await navigator.clipboard.writeText(url);
        alert('Link copied to clipboard: ' + url);
    } catch (error) {
        console.error('Error copying link to clipboard:', error);
    }
}

document.getElementById('categoryFilter').addEventListener('change', function () {
    const selectedCategory = this.value.toLowerCase();
    document.querySelectorAll('.link-item').forEach(function (link) {
        const linkCategory = link.dataset.category.toLowerCase();
        link.style.display = selectedCategory === 'all' || selectedCategory === linkCategory ? 'block' : 'none';
    });
});

// Funcionalidad de selección múltiple y eliminación
const deleteSelectedBtn = document.getElementById('deleteSelectedBtn');
const deleteDuplicatesBtn = document.getElementById('deleteDuplicatesBtn');
const checkboxes = document.querySelectorAll('.selectLinkCheckbox');
const selectAllCardView = document.getElementById('selectAllCardView');
const selectAllListView = document.getElementById('selectAllListView');

// Seleccionar todos los links en Card View
selectAllCardView.addEventListener('change', function() {
    const checked = this.checked;
    checkboxes.forEach(checkbox => {
        checkbox.checked = checked;
    });
    toggleDeleteButtons();
});

// Seleccionar todos los links en List View
selectAllListView.addEventListener('change', function() {
    const checked = this.checked;
    checkboxes.forEach(checkbox => {
        checkbox.checked = checked;
    });
    toggleDeleteButtons();
});

checkboxes.forEach(checkbox => {
    checkbox.addEventListener('change', toggleDeleteButtons);
});

// Función para encontrar duplicados por URL
function findDuplicateLinks() {
    const links = new Map();
    const duplicatesToRemove = [];

    checkboxes.forEach(checkbox => {
        const url = checkbox.dataset.url;
        if (!links.has(url)) {
            links.set(url, checkbox);
        } else {
            duplicatesToRemove.push(checkbox);
        }
    });

    return duplicatesToRemove;
}

// Eliminar enlaces duplicados
deleteDuplicatesBtn.addEventListener('click', async function() {
    const duplicatesToRemove = findDuplicateLinks();

    if (duplicatesToRemove.length > 0) {
        const duplicateIds = duplicatesToRemove.map(checkbox => checkbox.dataset.id);
        const confirmed = confirm(`Are you sure you want to delete ${duplicateIds.length} duplicate links?`);
        if (confirmed) {
            try {
                const response = await fetch('/links/delete-duplicates', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ ids: duplicateIds }),
                });

                const result = await response.json();

                if (result.success) {
                    result.deletedIds.forEach(id => {
                        const checkbox = document.querySelector(`.selectLinkCheckbox[data-id="${id}"]`);
                        if (checkbox) {
                            const card = checkbox.closest('.link-item') || checkbox.closest('tr');
                            if (card) {
                                card.remove();
                            }
                        }
                    });
                    alert(result.message);
                    updateUI();
                } else {
                    throw new Error(result.error || 'Failed to delete duplicate links');
                }
            } catch (error) {
                console.error('Error deleting duplicate links:', error);
                alert('An error occurred while deleting duplicate links. Please try again.');
            }
        }
    } else {
        alert('No duplicate links found.');
    }
});

// Eliminar enlaces seleccionados
deleteSelectedBtn.addEventListener('click', async function() {
    const selectedCheckboxes = Array.from(checkboxes).filter(checkbox => checkbox.checked);
    const selectedIds = selectedCheckboxes.map(checkbox => checkbox.dataset.id);

    if (selectedIds.length > 0) {
        const confirmed = confirm(`Are you sure you want to delete ${selectedIds.length} selected links?`);
        if (confirmed) {
            try {
                const response = await fetch('/links/delete-multiple', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ ids: selectedIds }),
                });

                const result = await response.json();

                if (result.success) {
                    selectedIds.forEach(id => {
                        const checkbox = document.querySelector(`.selectLinkCheckbox[data-id="${id}"]`);
                        if (checkbox) {
                            const card = checkbox.closest('.link-item') || checkbox.closest('tr');
                            if (card) {
                                card.remove();
                            }
                        }
                    });
                    alert(result.message);
                    updateUI();
                } else {
                    throw new Error(result.error || 'Failed to delete selected links');
                }
            } catch (error) {
                console.error('Error deleting selected links:', error);
                alert('An error occurred while deleting selected links. Please try again.');
            }
        }
    } else {
        alert('No links selected for deletion.');
    }
});

// Función para actualizar la interfaz de usuario
function updateUI() {
    const linkCount = document.querySelectorAll('.link-item, #linksTable tbody tr').length;
    const linkCountElement = document.getElementById('linkCount');
    if (linkCountElement) {
        linkCountElement.textContent = linkCount;
    }

    const noLinksMessage = document.querySelector('.no-links-message');
    const linksContainer = document.querySelector('.links-container');
    if (linkCount === 0) {
        if (noLinksMessage) noLinksMessage.style.display = 'block';
        if (linksContainer) linksContainer.style.display = 'none';
    } else {
        if (noLinksMessage) noLinksMessage.style.display = 'none';
        if (linksContainer) linksContainer.style.display = 'block';
    }

    updatePagination();
}

// Función para actualizar la paginación
function updatePagination() {
    const paginationElement = document.querySelector('.pagination');
    if (paginationElement) {
        const linkCount = document.querySelectorAll('.link-item, #linksTable tbody tr').length;
        const linksPerPage = 10; // Ajusta esto según tu configuración
        const pageCount = Math.ceil(linkCount / linksPerPage);

        const pageNumbers = paginationElement.querySelectorAll('.page-number');
        pageNumbers.forEach((pageNumber, index) => {
            if (index < pageCount) {
                pageNumber.style.display = 'inline-block';
            } else {
                pageNumber.style.display = 'none';
            }
        });

        const prevButton = paginationElement.querySelector('.prev-page');
        const nextButton = paginationElement.querySelector('.next-page');
        if (prevButton) prevButton.disabled = (currentPage === 1);
        if (nextButton) nextButton.disabled = (currentPage === pageCount);
    }
}

// Habilitar o deshabilitar los botones de eliminar
function toggleDeleteButtons() {
    const hasChecked = Array.from(checkboxes).some(checkbox => checkbox.checked);
    deleteSelectedBtn.disabled = !hasChecked;
    // El botón de eliminar duplicados ahora siempre está habilitado.
    deleteDuplicatesBtn.disabled = false;
}

// Inicializar el estado de los botones
toggleDeleteButtons();
</script>
